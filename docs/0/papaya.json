{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"papaya/lib/papaya.dart","id":"papaya","children":[{"returnType":{"refId":"papaya/ToStringHelper","name":"ToStringHelper"},"comment":"\nCreates an instance of [ToStringHelper].\n\n<p>This is helpful for implementing toString().\nSpecification by example:\n<pre>\n  // Returns \"ClassName{}\"\n  toStringHelper(\"ClassName\")\n   .toString();\n</pre>\n\n<pre>\n  // Returns \"ClassName{x=1}\"\n  toStringHelper(\"ClassName\"\n   .add(\"x\", 1)\n   .toString();\n</pre>\n\n<pre>\n  // Returns \"MyObject{x=1}\"\n  toStringHelper(\"MyObject\")\n   .add(\"x\", 1)\n   .toString();\n</pre>\n\n<pre>\n  // Returns \"ClassName{x=1, y=foo}\"\n  toStringHelper(\"ClassName\")\n   .add(\"x\", 1)\n   .add(\"y\", \"foo\")\n   .toString();\n</pre>\n\n<pre>\n  // Returns \"ClassName{x=1}\"\n  toStringHelper(\"ClassName\")\n   .omitNullValues().add(\"x\", 1)\n   .add(\"y\", null)\n   .toString();\n</pre>\n\n[className] the object class name\n","uri":"papaya/lib/src/objects.dart","name":"toStringHelper","id":"toStringHelper1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"className","id":"className","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nDetermines whether two possibly-null objects are equal. Returns:\n\n<ul>\n<li>[true] if a and b are both null.\n<li>[true] if a and b are both non-null and they are\n    equal according to ==\n<li>[false] in all other situations.\n</ul>\n\n<p>This assumes that any non-null objects passed to this function conform\nto the == contract.\n","uri":"papaya/lib/src/objects.dart","name":"equal","id":"equal2()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"b","id":"b","kind":"param"}],"line":"33","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nGenerates a hash code for multiple values.\n\n<p>This is useful for implementing [Object#hashCode()]. For example,\nin an object that has three properties : x, y, z, one could write:\n<pre>\nint hashCode() => hashcode([x, y, z]);\n</pre>\n\n<b>Warning</b>: When a single object is supplied, the returned hash code\ndoes not equal the hash code of that object.\n","uri":"papaya/lib/src/objects.dart","name":"hashcode","id":"hashcode1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Object","name":"Object"}],"name":"List"},"name":"fields","id":"fields","kind":"param"}],"line":"17","kind":"method"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nSupport class for [toStringHelper].\n\n","uri":"papaya/lib/src/objects.dart","name":"ToStringHelper","id":"ToStringHelper","children":[{"returnType":{"refId":"papaya/ToStringHelper","name":"ToStringHelper"},"comment":"\nConfigures the [ToStringHelper] so toString() will ignore\nproperties with null value. The order of calling this method, relative\nto the add() method, is not significant.\n","name":"omitNullValues","id":"omitNullValues0()","line":"100","kind":"method"},{"returnType":{"refId":"papaya/ToStringHelper","name":"ToStringHelper"},"comment":"\nAdds a name/value pair to the formatted output.\n","name":"add","id":"add2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"name":"value","id":"value","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string in the format specified by [toStringHelper(className)].\n\n<p>After calling this method, you can keep adding more properties to later\ncall toString() again and get a more complete representation of the\nsame object; but properties cannot be removed, so this only allows\nlimited reuse of the helper instance. The helper allows duplication of\nproperties (multiple name/value pairs with the same name can be added).\n","name":"toString","id":"toString0()","line":"122","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"className","id":"className","line":"86","kind":"variable"},{"ref":{"refId":"dart.collection/LinkedHashMap","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"LinkedHashMap"},"isFinal":true,"name":"_valueHolders","isPrivate":true,"id":"_valueHolders","line":"87","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_omitNullValues","isPrivate":true,"id":"_omitNullValues","line":"88","kind":"variable"},{"comment":"\nUse [toStringHelper(className)] method instead of this constructor.\n","name":"ToStringHelper","id":"ToStringHelper1()","children":[{"initializedField":{"refId":"papaya/ToStringHelper/className","name":"className"},"ref":{"refId":"dart.core/String","name":"String"},"name":"className","id":"className","kind":"param"}],"line":"93","kind":"constructor"}],"line":"84","kind":"class"}],"line":"1","kind":"library"}